/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.socialvagrancy.taskmanager.client.ui;

import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 *
 * @author etruyj@socialvagrancy
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    public Client(String base_url, boolean ignore_ssl, String log_path, int log_level, int log_size, int log_count) {
        initComponents();
        // The custom secondary components we're loading.
        // Add the other screens (panes)
        initializeClient(base_url, ignore_ssl, log_path, log_level, log_size, log_count);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        display_pane = new javax.swing.JPanel();
        menu_bar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        properties_option = new javax.swing.JMenuItem();
        logout_option = new javax.swing.JMenuItem();
        quit_option = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 500));

        display_pane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        display_pane.setLayout(new java.awt.CardLayout());

        jMenu1.setText("File");

        properties_option.setText("Properties");
        jMenu1.add(properties_option);

        logout_option.setText("Logout");
        jMenu1.add(logout_option);

        quit_option.setText("Quit");
        quit_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quit_optionActionPerformed(evt);
            }
        });
        jMenu1.add(quit_option);

        menu_bar.add(jMenu1);

        jMenu2.setText("Edit");
        menu_bar.add(jMenu2);

        setJMenuBar(menu_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(display_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(display_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void attachPanes()
    {
        // Initialize the Listener and add them to the different panes
        screen_listener = new ActionListener() {;
                public void actionPerformed(ActionEvent e)
                {
                    System.err.println(e.getActionCommand());                   
                    processButtonActions(e.getActionCommand());
                }
        };
        
        login_pane.attachToClient(screen_listener);
        task_details_pane.attachToClient(screen_listener);
        task_list_pane.attachToClient(screen_listener);

    }
    
    private void initializeClient(String base_url, boolean ignore_ssl, String log_path, int log_level, int log_size, int log_count)
    {
        api_controller = new Controller(base_url, ignore_ssl, log_path, log_level, log_size, log_count);
        logged_in = false;
        screen_history = new String[5];
        
        screens = new javax.swing.JPanel(new CardLayout());
        account_details_pane = new AccountDetails();
        account_search_pane = new AccountSearch();
        config_pane = new Configuration();
        login_pane = new Login();
        task_details_pane = new TaskDetails();
        task_list_pane = new TaskList();
        
        login_pane.setApiController(api_controller);
        task_details_pane.setApiController(api_controller);
        task_list_pane.setApiController(api_controller);
        
        attachPanes();
        
        screens.add(account_details_pane, "ACCOUNT_DETAILS");
        screens.add(account_search_pane, "ACCOUNT_SEARCH");
        screens.add(config_pane, "CONFIGURATION");
        screens.add(login_pane, "LOGIN");
        screens.add(task_details_pane, "TASK_DETAILS");
        screens.add(task_list_pane, "TASK_LIST");
        
        display_pane.add(screens);
  
        refresh();
        // Testing
        //logged_in = true;
        //showScreen("TASK_DETAILS", "NEW");
        showScreen("LOGIN", null);

    }
    
    private void processButtonActions(String command)
    {
        // Process the signals emitted by the buttons on different 
        // screens in order to switch screens to the desired new one.
        String object_id = null;
        
        
        // Do this first to change the command after the return.
        int history_counter = 0;
        while(command.equals("RETURN"))
        {
            history_counter += 1;
            command = screen_history[history_counter];
            System.err.println("Last screen: " + command);
        }
            
        // Store the command history
        storeHistory(command);
        
        // Split the button command from any object information
        // Expected format command:object_id
        String[] com_parts = command.split(":");
               
        command = com_parts[0];
        
        if(com_parts.length > 1)
        {
            object_id = com_parts[1];
        } 
        
        switch (command)
        {
                case "LOGIN_SUCCESSFUL":
                case "TASK_LIST":
                    logged_in = true;
                    showScreen("TASK_LIST", object_id);
                    break;
                case "LOGOUT":
                    logged_in = false;
                    showScreen("LOGIN", null);
                    break;      
                case "TASK_DETAILS":
                    showScreen("TASK_DETAILS", object_id);
                    break;
        }
    }
    
    private void quit_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quit_optionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quit_optionActionPerformed

    private void refresh()
    {
        display_pane.revalidate();
        display_pane.repaint();
    }
    
    private void showScreen(String screen, String object_id)
    {
        CardLayout layout = new CardLayout();
        layout = (CardLayout) screens.getLayout();
     
        if(!logged_in)
        {
            // Reset to login screen if not logged in.
            layout.show(screens, "LOGIN");
        }    
        else
        {
            layout.show(screens, screen);
            
            switch(screen)
            {
                case "TASK_DETAILS":
                    task_details_pane.refresh(object_id);
                    break;
                case "TASK_LIST":
                    task_list_pane.refresh(object_id);
                    break;
            }
                
        }
        
        refresh();
    }
    
    private void storeHistory(String command)
    {
        // Store the history of what screens were used.
        // This allows for going back through the history 
        // with the cancel button.
        String history = "";
        for(int i = screen_history.length-1; i>=0; i--)
        {
            if(screen_history[i] != null)
            {
                history = screen_history[i];
            }
            
            if(i <= screen_history.length-2)
            {
                screen_history[i+1]  = history;
            }
        }
        
        screen_history[0] = command;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        boolean ignore_ssl = false;
        String url = "http://192.168.2.25:5050/sv/";
        String log_path = "../log/client_log.txt";
        int log_level = 1;
        int log_size = 10240;
        int log_count = 3;
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client(url, ignore_ssl, log_path, log_level, log_size, log_count).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel display_pane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem logout_option;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JMenuItem properties_option;
    private javax.swing.JMenuItem quit_option;
    // End of variables declaration//GEN-END:variables
    
    // Import External Components
    private javax.swing.JPanel screens;
    private AccountDetails account_details_pane;
    private AccountSearch account_search_pane;
    private Configuration config_pane;
    private Login login_pane;
    private TaskDetails task_details_pane;
    private TaskList task_list_pane;
    
    
    // Config Paremeters
    private ActionListener screen_listener;
    private boolean logged_in;
    private Controller api_controller;
    private String[] screen_history;
    
}
